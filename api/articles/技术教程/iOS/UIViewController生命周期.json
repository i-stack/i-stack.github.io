{"title":"UIViewController生命周期","slug":"技术教程/iOS/UIViewController生命周期","date":"2022-02-04T03:24:37.000Z","updated":"2023-08-10T16:08:13.057Z","comments":true,"path":"api/articles/技术教程/iOS/UIViewController生命周期.json","excerpt":null,"covers":null,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"初始化-Initialization\"><a href=\"#初始化-Initialization\" class=\"headerlink\" title=\"初始化 Initialization\"></a>初始化 Initialization</h2><p>1、- (instancetype)initWithCoder:(NSCoder *)coder</p>\n<p>2、- (void)awakeFromNib</p>\n<p>3、- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil </p>\n<p>4、- (instancetype)init </p>\n<h2 id=\"loadView\"><a href=\"#loadView\" class=\"headerlink\" title=\"loadView()\"></a>loadView()</h2><p>1、加载控制器管理的view;</p>\n<p>2、若控制器有关联的Nib文件，该方法会从Nib文件加载View；若如没有，创建空白UIView对象；</p>\n<p>3、不能手动调用该方法，可以在该方法中创建view，并分配给根视图view；</p>\n<h2 id=\"viewDidLoad\"><a href=\"#viewDidLoad\" class=\"headerlink\" title=\"viewDidLoad()\"></a>viewDidLoad()</h2><p>1、view被加载到内存后调用 viewDidLoad();</p>\n<p>2、重写该方法需要首先调用其父类的该方法；</p>\n<p>3、该方法中可以额外初始化控件，比如：添加子控件，添加约束等；</p>\n<p>4、在控制器生命周期中，只会被调用一次；</p>\n<p>5、在控制器的生命周期中，若将self.view置为nil，则会重新调用loadView();</p>\n<h2 id=\"viewWillAppear\"><a href=\"#viewWillAppear\" class=\"headerlink\" title=\"viewWillAppear(:)\"></a>viewWillAppear(:)</h2><p>1、该方法在控制器view即将添加到视图层及展示view时所有动画配置前被调用；</p>\n<p>2、在控制器生命周期中，该方法可能会被多次调用；</p>\n<h2 id=\"viewWillLayoutSubviews\"><a href=\"#viewWillLayoutSubviews\" class=\"headerlink\" title=\"viewWillLayoutSubviews()\"></a>viewWillLayoutSubviews()</h2><p>1、该方法通知控制器将要布局view的子控件时调用；</p>\n<p>2、每当视图的bounds改变，view将调整其子控件的位置；</p>\n<p>3、默认实现为空，调用时，AutoLayout未起作用；</p>\n<p>4、在控制器生命周期中，该方法可能会被多次调用；</p>\n<h2 id=\"viewDidLayoutSubviews\"><a href=\"#viewDidLayoutSubviews\" class=\"headerlink\" title=\"viewDidLayoutSubviews()\"></a>viewDidLayoutSubviews()</h2><p>1、该方法通知控制器已经完成布局view的子控件时调用；</p>\n<p>2、可以重写该方法，在view布局子控件后作出改变；</p>\n<p>3、默认实现为空，调用时，AutoLayout已经完成；</p>\n<p>4、在控制器生命周期中，该方法可能会被多次调用；</p>\n<h2 id=\"viewDidAppear\"><a href=\"#viewDidAppear\" class=\"headerlink\" title=\"viewDidAppear(_:)\"></a>viewDidAppear(_:)</h2><p>1、该方法在控制器view已经添加到视图层时被调用；</p>\n<p>2、重写该方法首先要调用其父类该方法；</p>\n<p>3、在控制器生命周期中，该方法可能会被多次调用；</p>\n<h2 id=\"viewWillDisappear\"><a href=\"#viewWillDisappear\" class=\"headerlink\" title=\"viewWillDisappear(_:)\"></a>viewWillDisappear(_:)</h2><p>1、该方法在控制器view将要从视图层移除时被调用；</p>\n<p>2、该方法可以取消视图第一响应者状态；</p>\n<h2 id=\"viewDidDisappear\"><a href=\"#viewDidDisappear\" class=\"headerlink\" title=\"viewDidDisappear(_:)\"></a>viewDidDisappear(_:)</h2><p>1、该方法在控制器view已经从视图层移除时被调用；</p>\n<p>2、该方法可以重写用于清除或隐藏控件；</p>\n<h2 id=\"deinit\"><a href=\"#deinit\" class=\"headerlink\" title=\"deinit\"></a>deinit</h2><p>控制器销毁时调用该方法；</p>\n","more":"<h2 id=\"初始化-Initialization\"><a href=\"#初始化-Initialization\" class=\"headerlink\" title=\"初始化 Initialization\"></a>初始化 Initialization</h2><p>1、- (instancetype)initWithCoder:(NSCoder *)coder</p>\n<p>2、- (void)awakeFromNib</p>\n<p>3、- (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil </p>\n<p>4、- (instancetype)init </p>\n<h2 id=\"loadView\"><a href=\"#loadView\" class=\"headerlink\" title=\"loadView()\"></a>loadView()</h2><p>1、加载控制器管理的view;</p>\n<p>2、若控制器有关联的Nib文件，该方法会从Nib文件加载View；若如没有，创建空白UIView对象；</p>\n<p>3、不能手动调用该方法，可以在该方法中创建view，并分配给根视图view；</p>\n<h2 id=\"viewDidLoad\"><a href=\"#viewDidLoad\" class=\"headerlink\" title=\"viewDidLoad()\"></a>viewDidLoad()</h2><p>1、view被加载到内存后调用 viewDidLoad();</p>\n<p>2、重写该方法需要首先调用其父类的该方法；</p>\n<p>3、该方法中可以额外初始化控件，比如：添加子控件，添加约束等；</p>\n<p>4、在控制器生命周期中，只会被调用一次；</p>\n<p>5、在控制器的生命周期中，若将self.view置为nil，则会重新调用loadView();</p>\n<h2 id=\"viewWillAppear\"><a href=\"#viewWillAppear\" class=\"headerlink\" title=\"viewWillAppear(:)\"></a>viewWillAppear(:)</h2><p>1、该方法在控制器view即将添加到视图层及展示view时所有动画配置前被调用；</p>\n<p>2、在控制器生命周期中，该方法可能会被多次调用；</p>\n<h2 id=\"viewWillLayoutSubviews\"><a href=\"#viewWillLayoutSubviews\" class=\"headerlink\" title=\"viewWillLayoutSubviews()\"></a>viewWillLayoutSubviews()</h2><p>1、该方法通知控制器将要布局view的子控件时调用；</p>\n<p>2、每当视图的bounds改变，view将调整其子控件的位置；</p>\n<p>3、默认实现为空，调用时，AutoLayout未起作用；</p>\n<p>4、在控制器生命周期中，该方法可能会被多次调用；</p>\n<h2 id=\"viewDidLayoutSubviews\"><a href=\"#viewDidLayoutSubviews\" class=\"headerlink\" title=\"viewDidLayoutSubviews()\"></a>viewDidLayoutSubviews()</h2><p>1、该方法通知控制器已经完成布局view的子控件时调用；</p>\n<p>2、可以重写该方法，在view布局子控件后作出改变；</p>\n<p>3、默认实现为空，调用时，AutoLayout已经完成；</p>\n<p>4、在控制器生命周期中，该方法可能会被多次调用；</p>\n<h2 id=\"viewDidAppear\"><a href=\"#viewDidAppear\" class=\"headerlink\" title=\"viewDidAppear(_:)\"></a>viewDidAppear(_:)</h2><p>1、该方法在控制器view已经添加到视图层时被调用；</p>\n<p>2、重写该方法首先要调用其父类该方法；</p>\n<p>3、在控制器生命周期中，该方法可能会被多次调用；</p>\n<h2 id=\"viewWillDisappear\"><a href=\"#viewWillDisappear\" class=\"headerlink\" title=\"viewWillDisappear(_:)\"></a>viewWillDisappear(_:)</h2><p>1、该方法在控制器view将要从视图层移除时被调用；</p>\n<p>2、该方法可以取消视图第一响应者状态；</p>\n<h2 id=\"viewDidDisappear\"><a href=\"#viewDidDisappear\" class=\"headerlink\" title=\"viewDidDisappear(_:)\"></a>viewDidDisappear(_:)</h2><p>1、该方法在控制器view已经从视图层移除时被调用；</p>\n<p>2、该方法可以重写用于清除或隐藏控件；</p>\n<h2 id=\"deinit\"><a href=\"#deinit\" class=\"headerlink\" title=\"deinit\"></a>deinit</h2><p>控制器销毁时调用该方法；</p>\n","abbrlink":"a023856c","categories":[{"name":"技术教程","path":"api/categories/技术教程.json"}],"tags":[{"name":"iOS","path":"api/tags/iOS.json"}]}